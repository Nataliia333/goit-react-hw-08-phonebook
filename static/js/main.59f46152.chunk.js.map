{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactsList/ContactsList.module.css","components/Container/Container.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","components/Container/Container.js","App.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","updateFilter","itemsReducer","createReducer","_","payload","state","filter","id","Number","loading","filterReducer","combineReducers","items","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","contactsReducer","devTools","process","axios","defaults","baseURL","name","number","dispatch","contact","console","log","post","then","data","catch","error","contactId","delete","a","get","getFilter","getContacts","getLoading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","connect","contactsSelectors","onAdd","value","contactsOperations","item","onInputChange","event","target","className","styles","ContactForm","type","onChange","ContactButton","onClick","preventDefault","map","alert","isLoadingContacts","fetchContacts","onDelete","useEffect","handlerDelete","currentTarget","placeholder","Container","children","App","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59f46152.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__2Asif\",\"ContactButton\":\"ContactForm_ContactButton__1lCJP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactButton\":\"ContactsList_ContactButton__2blyE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__BJgBE\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const updateFilter = createAction('contacts/updateFilter');\r\n// export const updateFilter = createAction('app/Update_filter');\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  updateFilter,\r\n} from './contacts-actions';\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== Number(payload)),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactRequest]: () => true,\r\n  [fetchContactSuccess]: () => false,\r\n  [fetchContactError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\nconst filterReducer = createReducer('', {\r\n  [updateFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n  loading,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\n\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import axios from 'axios';\r\n\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactRequest());\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n};\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n  const contact = { name, number };\r\n  console.log(contact);\r\n\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nexport default {\r\n  addContact,\r\n  deleteContact,\r\n  fetchContacts,\r\n};\r\n","// мемоизация селекторов\r\nimport { createSelector } from '@reduxjs/toolkit';\r\n\r\n//\r\nconst getLoading = state => state.contacts.loading;\r\nconst getFilter = state => state.contacts.filter;\r\nconst getContacts = state => state.contacts.items;\r\n\r\n// const getVisibleContacts = state => {\r\n//   const filter = getFilter(state);\r\n//   const contacts = getContacts(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n//   return contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n// мемоизация селекторов\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nexport default {\r\n  getLoading,\r\n  getFilter,\r\n  getContacts,\r\n  getVisibleContacts,\r\n};\r\n","import { connect } from 'react-redux';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport styles from './ContactForm.module.css';\r\n\r\nconst ContactForm = ({ contacts, onAdd }) => {\r\n  let item = { name: '', number: '' };\r\n\r\n  const onInputChange = event => {\r\n    item = { ...item, [event.target.id]: event.target.value };\r\n  };\r\n\r\n  const isAlreadyContact = () => {\r\n    const Names = contacts.map(contact => contact.name);\r\n    return Names.includes(item.name);\r\n  };\r\n\r\n  const onSave = event => {\r\n    event.preventDefault();\r\n    isAlreadyContact()\r\n      ? alert(`${item.name} is already in contacts.`)\r\n      : onAdd(item);\r\n  };\r\n\r\n  return (\r\n    <form className={styles.ContactForm}>\r\n      <label>Name</label>\r\n      <input type=\"text\" onChange={onInputChange} id=\"name\"></input>\r\n      <label>Number</label>\r\n      <input type=\"text\" onChange={onInputChange} id=\"number\"></input>\r\n      <button className={styles.ContactButton} type=\"submit\" onClick={onSave}>\r\n        AddContact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: contactsSelectors.getContacts(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchProps = dispatch => {\r\n  return {\r\n    onAdd: value => dispatch(contactsOperations.addContact(value)),\r\n  };\r\n};\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n  onAdd: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(ContactForm);\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\nimport styles from './ContactsList.module.css';\r\n\r\nconst ContactsList = ({\r\n  contacts,\r\n  isLoadingContacts,\r\n  onDelete,\r\n  fetchContacts,\r\n}) => {\r\n  useEffect(() => fetchContacts(), []);\r\n  const handlerDelete = event => {\r\n    onDelete(event.currentTarget.id);\r\n  };\r\n\r\n  return (\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id}>\r\n          {name}: {number}\r\n          <button\r\n            id={id}\r\n            className={styles.ContactButton}\r\n            type=\"button\"\r\n            onClick={handlerDelete}\r\n          >\r\n            Delete\r\n          </button>\r\n          {isLoadingContacts && <h1>Loading...</h1>}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: contactsSelectors.getVisibleContacts(state),\r\n    filter: contactsSelectors.getFilter(state),\r\n    isLoadingContacts: contactsSelectors.getLoading(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchProps = dispatch => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n  onDelete: value => dispatch(contactsOperations.deleteContact(value)),\r\n});\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(ContactsList);\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { updateFilter } from '../../redux/contacts/contacts-actions';\r\n\r\nconst Filter = ({ updateFilter }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        onChange={updateFilter}\r\n        id=\"find\"\r\n        placeholder=\"Enter name for Search\"\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchProps = dispatch => {\r\n  return {\r\n    updateFilter: event => dispatch(updateFilter(event.target.value)),\r\n  };\r\n};\r\n\r\nFilter.propTypes = {\r\n  updateFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, mapDispatchProps)(Filter);\r\n","import React from 'react';\r\nimport styles from './Container.module.css';\r\n\r\nconst Container = ({ children }) => (\r\n  <div className={styles.Container}>{children}</div>\r\n);\r\n\r\nexport default Container;\r\n","import { Component } from 'react';\r\nimport ContactForm from './components/ContactForm/ContactForm';\r\nimport ContactsList from './components/ContactsList/ContactsList';\r\nimport Filter from './components/Filter/Filter';\r\nimport Container from './components/Container/Container';\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h2>Form Contact</h2>\r\n        <ContactForm />\r\n        <h2>Contacts List</h2>\r\n        <Filter />\r\n        <ContactsList />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\nimport store from './redux/store';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}